---
title: Administration
page_classes: admin admin-index
hide_header: true
hide_footer: true
---
- content_for :head do
  = stylesheet_link_tag "lib/admin"

:ruby
  arg = request['params']
  filter = arg['filter']

  articles_filtered = if arg.empty?
      page_articles
    else
      current_list = page_articles
      tokens = filter.split(/ /)
      #tokens = filter.class == "string" ? [filter] : filter.map { |s| s.gsub /^['"]|['"]$/, '' }

      tokens.each do |token|
        current_list.select! {|a| a.body.downcase.match token.downcase}
      end

      current_list
    end

%nav.headerbar
  .container
    .left-side
      %strong= data.site.name
      Administration

    .right-side
      %span.label View:
      - if data.site['domain']
        =link_to "Production", "//#{data.site.domain}", {target: "_blank"}
      =link_to "Development", "/", {target: "_blank"}


%section.site-admin

  %h2 Site admin

  =link_to "Edit authors&hellip;", "authors/", {class: "btn btn-primary"}


%form.form.form-horizontal.newpost#newpost{action: "/admin/api/create", method: "post"}
  %h2 Create a new blog post
  .col-sm-6
    %input.title.form-control{name: "title", placeholder: "Type the blog post title here", autocomplete: "off"}
    .helpertip
      Please enter a title for your new blog post.

  .col-sm-4.form-inline.form-group
    %label{for: "author-select"}
      by
    %select.form-control{name: "author", id: "author-select"}
      - data.authors.sort_by {|n, d| author_name n}.each do |nick, data|
        - if nick == ENV['USER']
          %option{value: nick, selected: true}= author_name nick
        - else
          %option{value: nick}= author_name nick

  %button#create-post-action.btn.btn-primary.col-sm-2
    Create post


%form.form.form-horizontal.filterform#filterform{action: "/admin/", method: "post"}
  %h2 Edit past posts
  .filter-wrap.col-sm-12
    %input.form-control.col-sm-11#filterbox{name: "filter", value: filter, placeholder: "Search all posts", autocomplete: "off"}

    %button.btn.clearer#filterclear
      Ã—

    %noscript
      %button.btn.btn-primary.col-sm-1 Filter


%table.articles.blog-admin#articlelist
  - articles_filtered.each do |article|

    - post_date = article.date.strftime("%F")
    - post_slug = article.slug

    - filename_slug = article.path.scan(/\/([^\/]*).html/).first.first

    %tr.article{class: " #{article.published? ? 'published' : 'draft'}", id: filename_slug}

      %td.published
        - unless article.published?
          %i.draft-icon{title: "Draft"}
        %i.git-status

      %td
        .title
          =link_to article.title, "/admin/edit?date=#{post_date}&slug=#{post_slug}", {style: "display: block", title: "Edit article"}

        .meta
          %span.wordcount
            - wordcount = Nokogiri::HTML(article.body).text.scan(/[\w]+/).size
            = pluralize wordcount, "word"

          %span.author
            - author = data.authors[article.data.author]
            - if author
              by
              %span.name-full= author['name']

          %span.tags
            = article.tags.join ', '

      %td.viewlink
        = link_to "", article.url, {target: "_blank", title: "Open article in a new tab"}

      %td.date
        .date-format="#{article.date.to_date}"
        .date-ago="#{time_ago_in_words article.date}"


- content_for :tail do
  :coffee
    $newpostForm = $('#newpost')
    $newpostTitle = $('.title', $newpostForm)
    $form = $('#filterform')
    $filter = $('#filterbox')
    $clearer = $('#filterclear')
    $author = $('#author-select')
    delayTimer = null
    gitTimer = null
    createAjax = null


    # Functions

    createPost = ->
      if $newpostTitle.val()
        createAjax = $.post $newpostForm.attr('action'), $newpostForm.serialize(), (data)->
          returnval = $.parseJSON data

          if returnval['slug'] != ''
            setTimeout ->
              window.location = "/admin/edit?date=" + returnval['date'] + "&slug=" + returnval['slug']
            , 500
          else
            do $newpostTitle.focus

      else
        console.log 'EMPTY!'
        do $newpostTitle.focus
        $('.helpertip', $newpostForm).fadeIn(300).slideDown(300)

    clearFilter = (e) ->
      setTimeout ->
        $filter.val('')
        do $filter.focus
        do updateList
        do updateClearer
      , 1

    updateClearer = ->
      $clearer.toggle($filter.val() != '')

    updateList = ->
      $.get '/admin/?filter=' + $filter.val(), (data) ->
        gitStatus -> $('#articlelist').html $('#articlelist', data).children()


    activateFilter = (e) ->
      do updateClearer

      switch e.key
        when "Escape" then do clearFilter
        when "Esc" then do clearFilter
        when "Enter" then do e.preventDefault
        else
          clearTimeout delayTimer
          delayTimer = setTimeout ->
            do updateList
          , 500


    defaultAuthor = () ->
      $.cookie('admin-author-default')


    storeDefaultAuthor = () ->
      $.cookie('admin-author-default', $author.val(), {expires: 365})


    setAuthor = (nick) ->
      $author.val(nick)


    @gitStatus = (callback) ->
      $.getJSON '/admin/api/git/status/', (data) ->
        if callback && typeof callback == "function"
          do callback

        $fragment = $('#articlelist')

        # Remove status icons
        statuses = '.status-new,.status-deleted,.status-modified'
        $(statuses, $fragment)
          .removeClass(statuses.replace(/\./g, '').replace(',', ' '))
          .find('.git-status[title]').removeAttr('title')

        $.each data.blog, (key, value)->
          $(value.join(','), $fragment)
            .addClass('status-' + key)
            .find('.git-status').attr('title', key.replace(/\b\w/g, (l)-> do l.toUpperCase))


    # Bindings

    $newpostTitle.on 'keypress', (e) ->
      $('.helpertip', $newpostForm).fadeOut(200)

    $newpostForm.on 'submit', (e) ->
      do createPost
      do e.preventDefault
      return false

    $form.on 'submit', (e) -> do e.preventDefault

    $filter.on 'keypress', activateFilter

    $clearer.on 'click', clearFilter

    # Workaround for cache w/ back/forward
    $(window).on 'load', updateList


    # On ready
    $ ->
      do LiveReload.shutDown

      do updateClearer
      do $filter.focus
      do gitStatus

      setAuthor defaultAuthor() if defaultAuthor()

      $author.on 'change', storeDefaultAuthor
