-#######################################################################
-#
-# Filters are supported. To use with a filter, include like so:
-#   = partial 'upcoming', locals: {filter: /string/i}
-# ...or set events_filter to a string in data/site.yml
-# ...and use the then plain partial below.
-#
-# Otherwise, just do a normal partial include:
-#   = partial 'upcoming'
-#
-#######################################################################

%dl.upcoming-list
  :ruby
    # Use partial-supplied filter, or fall back to site-defined filter
    filter ||= data.site.events_filter
    events_processed = confs_match filter

    # Default to 10 events, unless otherwise specificed in data/site.yml
    events_max = data.site.events_max || 10

    events_counter = 0

  - events_processed.sort_by {|k, v| k}.each do |year_label, year|
    - year.each do |conf_label, conf|
      - if conf.type && conf.type == 'series'
        - if conf.talks
          - conf.talks.each do |talk|
            - events_counter += 1

            - unless events_counter > events_max
              %dd.upcoming-date
                %span.day= Date.parse(talk.start).strftime('%-d')
                %span.month= Date.parse(talk.start).strftime('%b')
              %dt.upcoming-event
                %a{:href => "/events/##{conf_label.parameterize}--#{talk.title.parameterize}"}
                  = talk.title

      - elsif conf.start
        - events_counter += 1

        - unless events_counter > events_max
          %dd.upcoming-date
            %span.day= conf.start.strftime('%-d')
            %span.month= conf.start.strftime('%b')
          %dt.upcoming-event
            %a{:href => "/events/##{conf_label.parameterize}"}
              = conf.name
          %dd.upcoming-location
            = conf.location
